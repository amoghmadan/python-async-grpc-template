[build-system]
requires = ["setuptools", "setuptools_scm", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "app"
dynamic = ["version"]
description = "A starter project for a gRPC API."
readme = "README.md"
authors = [{ name = "Amogh Madan", email = "amoghmadaan@gmail.com" }]
license-files = ["LICENSE"]
requires-python = ">=3.13,<3.14"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet",
]
dependencies = [
    "alembic==1.16.4",
    "greenlet==3.2.3",
    "grpcio==1.74.0",
    "grpcio-tools==1.74.0",
    "Mako==1.3.10",
    "MarkupSafe==3.0.2",
    "protobuf==6.31.1",
    "setuptools==80.9.0",
    "SQLAlchemy==2.0.41",
    "typing_extensions==4.14.1",
]


[project.urls]
Homepage = "https://github.com/amoghmadan/Python-FastAPI-REST-Starter"
Repository = "https://github.com/amoghmadan/Python-FastAPI-REST-Starter"
Issues = "https://github.com/amoghmadan/Python-FastAPI-REST-Starter/issues"


[project.optional-dependencies]
automation = [
    "cachetools==6.1.0",
    "chardet==5.2.0",
    "colorama==0.4.6",
    "distlib==0.3.9",
    "filelock==3.18.0",
    "platformdirs==4.3.8",
    "pluggy==1.6.0",
    "pyproject-api==1.9.1",
    "tox==4.27.0",
    "virtualenv==20.31.2",
]
mysql = ["asyncmy==0.2.10"]
postgres = ["asyncpg==0.30.0"]
sqlite = ["aiosqlite==0.21.0"]
test = [
    "coverage==7.9.1",
    "iniconfig==2.1.0",
    "pytest==8.4.1",
    "pytest-asyncio==1.1.0",
]


[tool.setuptools.packages.find]
where = ["src"]
exclude = ["**/__pycache__"]


[tool.setuptools_scm]
write_to = "src/app/__version__.py"
local_scheme = "no-local-version"


[tool.coverage.run]
omit = ["test/*", ".venv/*", "venv/*", "__version__.py"]


[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q"
testpaths = ["test"]
asyncio_mode = "auto"


[tool.isort]
profile = "black"
extend_skip = ["migrations"]

[tool.black]
extend-exclude = "migrations/*"


[tool.bandit]
exclude_dirs = [
    "./.eggs",
    "./.git",
    "./.tox",
    "./build",
    "./coverage",
    "./dist",
    "./venv",
    "./__pycache__",
    "*tests*",
]


[tool.mypy]
exclude = """
^.*\b(migrations)\b.*$
"""
ignore_missing_imports = true


[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "app:migrations"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# name = "ruff"
# type = "module"
# module = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# Alternatively, use the exec runner to execute a binary found on your PATH
# name = "ruff"
# type = "exec"
# executable = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
